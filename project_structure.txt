When developing a large FastAPI project, it’s important to organize your code in a way that promotes maintainability, scalability, and clear separation of concerns. Here’s an example of a project structure that follows best practices for a large FastAPI application.

### Project Structure

```
my_fastapi_project/
├── app/
│   ├── __init__.py
│   ├── core/
│   │   ├── __init__.py
│   │   ├── config.py
│   │   ├── security.py
│   ├── db/
│   │   ├── __init__.py
│   │   ├── base.py
│   │   ├── session.py
│   ├── models/
│   │   ├── __init__.py
│   │   ├── item.py
│   │   ├── user.py
│   ├── schemas/
│   │   ├── __init__.py
│   │   ├── item.py
│   │   ├── user.py
│   ├── crud/
│   │   ├── __init__.py
│   │   ├── item.py
│   │   ├── user.py
│   ├── api/
│   │   ├── __init__.py
│   │   ├── deps.py
│   │   ├── api_v1/
│   │   │   ├── __init__.py
│   │   │   ├── endpoints/
│   │   │   │   ├── __init__.py
│   │   │   │   ├── items.py
│   │   │   │   ├── users.py
│   ├── main.py
│   ├── tests/
│       ├── __init__.py
│       ├── test_items.py
│       ├── test_users.py
├── .env
├── alembic.ini
├── requirements.txt
└── README.md
```

### Explanation of Each Directory and File

- **`app/`**: Main application folder.
  - **`__init__.py`**: Marks the directory as a Python package.
  - **`core/`**: Core configurations and utilities.
    - **`config.py`**: Configuration settings (e.g., environment variables).
    - **`security.py`**: Security utilities (e.g., password hashing, JWT handling).
  - **`db/`**: Database setup and session management.
    - **`base.py`**: Base class for models to inherit from.
    - **`session.py`**: Database session management.
  - **`models/`**: SQLAlchemy models.
    - **`item.py`**: Item model.
    - **`user.py`**: User model.
  - **`schemas/`**: Pydantic models for request and response.
    - **`item.py`**: Item schema.
    - **`user.py`**: User schema.
  - **`crud/`**: CRUD (Create, Read, Update, Delete) operations.
    - **`item.py`**: CRUD operations for items.
    - **`user.py`**: CRUD operations for users.
  - **`api/`**: API routes.
    - **`deps.py`**: Dependencies for API routes.
    - **`api_v1/`**: API version 1.
      - **`endpoints/`**: Individual endpoint routes.
        - **`items.py`**: Item-related endpoints.
        - **`users.py`**: User-related endpoints.
  - **`main.py`**: Application entry point.
  - **`tests/`**: Unit and integration tests.
    - **`test_items.py`**: Tests for item endpoints.
    - **`test_users.py`**: Tests for user endpoints.

- **`.env`**: Environment variables.
- **`alembic.ini`**: Alembic configuration file for database migrations.
- **`requirements.txt`**: List of dependencies.
- **`README.md`**: Project documentation.

### Example Files

#### `app/core/config.py`

```python
from pydantic import BaseSettings

class Settings(BaseSettings):
    API_V1_STR: str = "/api/v1"
    DATABASE_URL: str = "sqlite:///./test.db"
    SECRET_KEY: str = "YOUR_SECRET_KEY"
    ACCESS_TOKEN_EXPIRE_MINUTES: int = 30

    class Config:
        env_file = ".env"

settings = Settings()
```

#### `app/core/security.py`

```python
from passlib.context import CryptContext

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def verify_password(plain_password, hashed_password):
    return pwd_context.verify(plain_password, hashed_password)

def get_password_hash(password):
    return pwd_context.hash(password)
```

#### `app/db/session.py`

```python
from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

from app.core.config import settings

engine = create_engine(settings.DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
```

#### `app/models/item.py`

```python
from sqlalchemy import Column, Integer, String
from app.db.session import Base

class Item(Base):
    __tablename__ = "items"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String, index=True)
    price = Column(Integer)
    tax = Column(Integer)
```

#### `app/models/user.py`

```python
from sqlalchemy import Column, Integer, String
from app.db.session import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String, unique=True, index=True)
    email = Column(String, unique=True, index=True)
    hashed_password = Column(String)
```

#### `app/schemas/item.py`

```python
from pydantic import BaseModel

class ItemBase(BaseModel):
    name: str
    description: str = None
    price: int
    tax: int = None

class ItemCreate(ItemBase):
    pass

class Item(ItemBase):
    id: int

    class Config:
        orm_mode = True
```

#### `app/schemas/user.py`

```python
from pydantic import BaseModel, EmailStr

class UserBase(BaseModel):
    username: str
    email: EmailStr

class UserCreate(UserBase):
    password: str

class User(UserBase):
    id: int

    class Config:
        orm_mode = True
```

#### `app/crud/item.py`

```python
from sqlalchemy.orm import Session
from app.models import Item
from app.schemas import ItemCreate

def get_item(db: Session, item_id: int):
    return db.query(Item).filter(Item.id == item_id).first()

def create_item(db: Session, item: ItemCreate):
    db_item = Item(**item.dict())
    db.add(db_item)
    db.commit()
    db.refresh(db_item)
    return db_item
```

#### `app/crud/user.py`

```python
from sqlalchemy.orm import Session
from app.models import User
from app.schemas import UserCreate
from app.core.security import get_password_hash

def get_user(db: Session, user_id: int):
    return db.query(User).filter(User.id == user_id).first()

def get_user_by_email(db: Session, email: str):
    return db.query(User).filter(User.email == email).first()

def create_user(db: Session, user: UserCreate):
    hashed_password = get_password_hash(user.password)
    db_user = User(email=user.email, username=user.username, hashed_password=hashed_password)
    db.add(db_user)
    db.commit()
    db.refresh(db_user)
    return db_user
```

#### `app/api/deps.py`

```python
from fastapi import Depends, HTTPException, status
from sqlalchemy.orm import Session
from app.db.session import get_db
from app.models import User
from app.crud.user import get_user_by_email

def get_current_user(db: Session = Depends(get_db), email: str = None):
    user = get_user_by_email(db, email=email)
    if user is None:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="Invalid credentials")
    return user
```

#### `app/api/api_v1/endpoints/items.py`

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app import crud, models, schemas
from app.api import deps

router = APIRouter()

@router.post("/", response_model=schemas.Item)
def create_item(item: schemas.ItemCreate, db: Session = Depends(deps.get_db)):
    return crud.item.create_item(db=db, item=item)

@router.get("/{item_id}", response_model=schemas.Item)
def read_item(item_id: int, db: Session = Depends(deps.get_db)):
    db_item = crud.item.get_item(db, item_id=item_id)
    if db_item is None:
        raise HTTPException(status_code=404, detail="Item not found")
    return db_item
```

#### `app/api/api_v1/endpoints

/users.py`

```python
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from app import crud, models, schemas
from app.api import deps

router = APIRouter()

@router.post("/", response_model=schemas.User)
def create_user(user: schemas.UserCreate, db: Session = Depends(deps.get_db)):
    return crud.user.create_user(db=db, user=user)

@router.get("/{user_id}", response_model=schemas.User)
def read_user(user_id: int, db: Session = Depends(deps.get_db)):
    db_user = crud.user.get_user(db, user_id=user_id)
    if db_user is None:
        raise HTTPException(status_code=404, detail="User not found")
    return db_user
```

#### `app/main.py`

```python
from fastapi import FastAPI
from app.core.config import settings
from app.db.session import engine
from app.models import item, user
from app.api.api_v1.endpoints import items, users

app = FastAPI()

item.Base.metadata.create_all(bind=engine)
user.Base.metadata.create_all(bind=engine)

app.include_router(items.router, prefix=f"{settings.API_V1_STR}/items", tags=["items"])
app.include_router(users.router, prefix=f"{settings.API_V1_STR}/users", tags=["users"])

@app.get("/")
def read_root():
    return {"message": "Welcome to the FastAPI application!"}
```

This structure and organization should help you manage a larger FastAPI project effectively, ensuring a clean separation of concerns and making the codebase more maintainable.